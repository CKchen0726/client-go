/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ActionParamsApplyConfiguration represents an declarative configuration of the ActionParams type for use
// with apply.
type ActionParamsApplyConfiguration struct {
	RebootParams map[string]string `json:"reboot,omitempty"`
	StartParams  *string           `json:"start,omitempty"`
	StopParams   *string           `json:"stop,omitempty"`
}

// ActionParamsApplyConfiguration constructs an declarative configuration of the ActionParams type for use with
// apply.
func ActionParams() *ActionParamsApplyConfiguration {
	return &ActionParamsApplyConfiguration{}
}

// WithRebootParams puts the entries into the RebootParams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the RebootParams field,
// overwriting an existing map entries in RebootParams field with the same key.
func (b *ActionParamsApplyConfiguration) WithRebootParams(entries map[string]string) *ActionParamsApplyConfiguration {
	if b.RebootParams == nil && len(entries) > 0 {
		b.RebootParams = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.RebootParams[k] = v
	}
	return b
}

// WithStartParams sets the StartParams field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartParams field is set to the value of the last call.
func (b *ActionParamsApplyConfiguration) WithStartParams(value string) *ActionParamsApplyConfiguration {
	b.StartParams = &value
	return b
}

// WithStopParams sets the StopParams field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StopParams field is set to the value of the last call.
func (b *ActionParamsApplyConfiguration) WithStopParams(value string) *ActionParamsApplyConfiguration {
	b.StopParams = &value
	return b
}
