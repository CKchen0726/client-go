/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// VirtualMachineApplyConfiguration represents an declarative configuration of the VirtualMachine type for use
// with apply.
type VirtualMachineApplyConfiguration struct {
	DisplayName     *string                     `json:"displayName,omitempty"`
	Image           *string                     `json:"image,omitempty"`
	ImagePullPolicy *v1.PullPolicy              `json:"imagePullPolicy,omitempty"`
	Networks        []NetworkApplyConfiguration `json:"networks,omitempty"`
	Flavor          *FlavorApplyConfiguration   `json:"flavor,omitempty"`
	UUID            *string                     `json:"uuid,omitempty"`
	PowerSpec       *v1.VmPowerState            `json:"powerSpec,omitempty"`
}

// VirtualMachineApplyConfiguration constructs an declarative configuration of the VirtualMachine type for use with
// apply.
func VirtualMachine() *VirtualMachineApplyConfiguration {
	return &VirtualMachineApplyConfiguration{}
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithDisplayName(value string) *VirtualMachineApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithImage(value string) *VirtualMachineApplyConfiguration {
	b.Image = &value
	return b
}

// WithImagePullPolicy sets the ImagePullPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImagePullPolicy field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithImagePullPolicy(value v1.PullPolicy) *VirtualMachineApplyConfiguration {
	b.ImagePullPolicy = &value
	return b
}

// WithNetworks adds the given value to the Networks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Networks field.
func (b *VirtualMachineApplyConfiguration) WithNetworks(values ...*NetworkApplyConfiguration) *VirtualMachineApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworks")
		}
		b.Networks = append(b.Networks, *values[i])
	}
	return b
}

// WithFlavor sets the Flavor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Flavor field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithFlavor(value *FlavorApplyConfiguration) *VirtualMachineApplyConfiguration {
	b.Flavor = value
	return b
}

// WithUUID sets the UUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UUID field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithUUID(value string) *VirtualMachineApplyConfiguration {
	b.UUID = &value
	return b
}

// WithPowerSpec sets the PowerSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PowerSpec field is set to the value of the last call.
func (b *VirtualMachineApplyConfiguration) WithPowerSpec(value v1.VmPowerState) *VirtualMachineApplyConfiguration {
	b.PowerSpec = &value
	return b
}
