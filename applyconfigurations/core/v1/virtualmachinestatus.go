/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// VirtualMachineStatusApplyConfiguration represents an declarative configuration of the VirtualMachineStatus type for use
// with apply.
type VirtualMachineStatusApplyConfiguration struct {
	VirtualMachineID     *string          `json:"virtualMachineID,omitempty"`
	ImageID              *string          `json:"imageId,omitempty"`
	Image                *string          `json:"image,omitempty"`
	State                *v1.VmState      `json:"vmState,omitempty"`
	LastTerminationState *v1.VmState      `json:"lastTerminationState,omitempty"`
	TaskState            *v1.TaskState    `json:"taskState,omitempty"`
	PowerState           *v1.VmPowerState `json:"powerState,omitempty"`
	Ready                *bool            `json:"ready,omitempty"`
	RestartCount         *int32           `json:"restartCount,omitempty"`
}

// VirtualMachineStatusApplyConfiguration constructs an declarative configuration of the VirtualMachineStatus type for use with
// apply.
func VirtualMachineStatus() *VirtualMachineStatusApplyConfiguration {
	return &VirtualMachineStatusApplyConfiguration{}
}

// WithVirtualMachineID sets the VirtualMachineID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VirtualMachineID field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithVirtualMachineID(value string) *VirtualMachineStatusApplyConfiguration {
	b.VirtualMachineID = &value
	return b
}

// WithImageID sets the ImageID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageID field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithImageID(value string) *VirtualMachineStatusApplyConfiguration {
	b.ImageID = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithImage(value string) *VirtualMachineStatusApplyConfiguration {
	b.Image = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithState(value v1.VmState) *VirtualMachineStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithLastTerminationState sets the LastTerminationState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTerminationState field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithLastTerminationState(value v1.VmState) *VirtualMachineStatusApplyConfiguration {
	b.LastTerminationState = &value
	return b
}

// WithTaskState sets the TaskState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TaskState field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithTaskState(value v1.TaskState) *VirtualMachineStatusApplyConfiguration {
	b.TaskState = &value
	return b
}

// WithPowerState sets the PowerState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PowerState field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithPowerState(value v1.VmPowerState) *VirtualMachineStatusApplyConfiguration {
	b.PowerState = &value
	return b
}

// WithReady sets the Ready field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ready field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithReady(value bool) *VirtualMachineStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// WithRestartCount sets the RestartCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RestartCount field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithRestartCount(value int32) *VirtualMachineStatusApplyConfiguration {
	b.RestartCount = &value
	return b
}
